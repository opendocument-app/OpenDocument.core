name: build_test

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_MAXSIZE: 500M
  CCACHE_KEY_SUFFIX: r21

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-22.04, compiler: clang-15, cc: clang-15, cxx: clang++-15 }
          - { os: ubuntu-22.04, compiler: gcc-12, cc: gcc-12, cxx: g++-12 }
          - { os: macos-12, compiler: clang-14, cc: clang, cxx: clang++ }
          - { os: windows-2022, compiler: msvc-1939 }

    steps:
      - name: ubuntu install ccache
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt install ccache
          ccache -V
      - name: macos install ccache
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install ccache
          ccache -V

      - name: set up python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: install python dependencies
        run: pip install --upgrade pip conan==1.*

      - name: conan config
        run: conan config set general.revisions_enabled=1
      - name: conan remote
        run: |
          conan remote clean
          conan remote add conancenter https://center.conan.io
          conan remote add odr https://artifactory.opendocument.app/artifactory/api/conan/conan
      - name: conan login
        run: conan user --remote odr --password ${{ secrets.ARTIFACTORY }} admin

      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.ccache
            /Users/runner/Library/Caches/ccache
            ~/.conan/data
            C:/.conan
            C:/Users/runneradmin/.conan/data
          key: ${{ matrix.config.os }}-${{ matrix.config.compiler }}-${{ env.CCACHE_KEY_SUFFIX }}
          restore-keys: |
            ${{ matrix.config.os }}-${{ matrix.config.compiler }}-

      - name: checkout
        uses: actions/checkout@v2

      - name: cmake
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: >
          cmake -B build -S .
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=install
      - name: build
        # `config Release` somehow necessary for windows
        run: cmake --build build --config Release
      - name: install
        # `config Release` somehow necessary for windows
        run: cmake --build build --target install --config Release

      - name: upload binaries to conan repo
        run: conan upload "*" --remote odr --confirm --all

      - name: upload binaries to github
        uses: actions/upload-artifact@v2
        with:
          name: bin-${{ matrix.config.os }}-${{ matrix.config.compiler }}
          path: |
            install
            build/test/odr_test

  docker:
    needs: build
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - { os: ubuntu-22.04, compiler: clang-15, cc: clang-15, cxx: clang++-15 }

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/odr_core_cli
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: checkout
        uses: actions/checkout@v2

      - name: download binaries
        uses: actions/download-artifact@v2
        with:
          name: bin-${{ matrix.config.os }}-${{ matrix.config.compiler }}
          path: cli

      - run: ls -la cli

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: cli
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/odr_core_cli:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/odr_core_cli:buildcache,mode=max

      # TODO try to run it

  test:
    needs: build
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - { os: ubuntu-22.04, compiler: clang-15, cc: clang-15, cxx: clang++-15 }
          - { os: macos-12, compiler: clang-14, cc: clang, cxx: clang++ }

    steps:
      - name: ubuntu install tidy
        if: startsWith(matrix.config.os, 'ubuntu')
        run: sudo apt install tidy
      - name: macos install tidy
        if: startsWith(matrix.config.os, 'macos')
        run: brew install tidy-html5

      - name: set up python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_ANDIWAND }}
          submodules: true

      - run: pip install -r test/scripts/requirements.txt

      - name: download binaries
        uses: actions/download-artifact@v2
        with:
          name: bin-${{ matrix.config.os }}-${{ matrix.config.compiler }}
          path: .
      - name: fix artifact permissions
        run:  chmod +x build/test/odr_test

      - name: test
        working-directory: build/test
        run: ./odr_test

      - name: tidy public test outputs
        run: python3 -u test/scripts/tidy_output.py build/test/output/odr-public/output
      - name: compare public test outputs
        run: python3 -u test/scripts/compare_output.py --driver firefox --max-workers 1 test/data/reference-output/odr-public/output build/test/output/odr-public/output

      - name: tidy private test outputs
        run: python3 -u test/scripts/tidy_output.py build/test/output/odr-private/output
      - name: compare private test outputs
        run: python3 -u test/scripts/compare_output.py --driver firefox --max-workers 1 test/data/reference-output/odr-private/output build/test/output/odr-private/output

  build-test-downstream:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-22.04, compiler: clang-15, cc: clang-15, cxx: clang++-15 }
          - { os: ubuntu-22.04, compiler: gcc-12, cc: gcc-12, cxx: g++-12 }
          - { os: macos-12, compiler: clang-14, cc: clang, cxx: clang++ }
          - { os: windows-2022, compiler: msvc-1939 }

    steps:
      - name: ubuntu install ccache
        if: runner.os == 'Linux'
        run: |
          sudo apt install ccache
          ccache -V
      - name: macos install ccache
        if: runner.os == 'macOS'
        run: |
          brew install ccache
          ccache -V

      - name: set up python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: install python dependencies
        run: pip install --upgrade pip conan==1.*

      - name: conan config
        run: conan config set general.revisions_enabled=1
      - name: conan remote
        run: |
          conan remote clean
          conan remote add odr https://artifactory.opendocument.app/artifactory/api/conan/conan
          conan remote add conancenter https://center.conan.io

      - name: checkout
        uses: actions/checkout@v2

      - name: conan
        run: conan export . odrcore/0.0.0@

      - name: cmake
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: >
          cmake -B test/downstream/build -S test/downstream
          -DCMAKE_BUILD_TYPE=Release
      - name: build
        # `config Release` somehow necessary for windows
        run: cmake --build test/downstream/build --config Release

      - name: run
        if: runner.os != 'Windows'
        run: test/downstream/build/odr-test-downstream
      - name: run
        if: runner.os == 'Windows'
        run: test/downstream/build/Release/odr-test-downstream.exe
